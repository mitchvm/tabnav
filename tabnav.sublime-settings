{
	// The default capture level to use. Options are, in order from narrowest to broadest, are:
	// trimmed, content, markup, cell
	"capture_level": "content",

	// When true, whitespace is trimmed from the selected regions' text prior to putting it 
	// on the clipboard with the "Copy selections" commands. The Sublime Text selections themselves
	// are not altered.
	"trim_on_copy": true,
	
	// To override individual context configs or add new contexts without
	// overriding everything, place overrides in a "user_contexts" element,
	// not "contexts".
	"contexts":
	{
		"markdown": 
		{
			// No need for a file_selector separate from the main selector.
			"selector": "text.html.markdown",
			"except_selector": "markup.raw",
			// These patterns match both "bordered" and "borderless" Markdown tables.
			// See the README for override patterns if you only want to match on bordered tables.
			"patterns": [
				{
					// Markdown tables can have one markup row directly under the heading row.
					// It contains dashes, and optional colons to indicate text justification.
					"line": "^(?P<table>(\\|?\\s*[:-]+\\s*(?=\\|))+\\|\\s*[:-]*\\s*)$",
					"cell": [
						"(?P<cell>\\|?(?P<markup>\\s*[:-]+\\s*))(?=\\|)",
						"(?P<cell>\\|(?P<markup>\\s*[:-]+\\s*))$" // Captures the last cell of a borderless table.
					]
				},
				{
					"cell":[
						"(?P<cell>\\|?(?P<markup>(?P<content>\\s*?(?P<trimmed>\\B|(?:\\S.*?))\\s*)))(?=\\|)",
						"(?P<cell>\\|(?P<markup>(?P<content>\\s*?(?P<trimmed>(?:\\B(?=\\s))|(?:\\S.*?))\\s*)))$" // Captures the last cell of a borderless table.
					]
				}
			],
		},
		"orgmode":
		{
			// No need for a file_selector separate from the main selector.
			"selector": "text.orgmode",
			"except_selector": "orgmode.raw.block",
			// Org Mode has three forms of table markup rows:
			// 1) Simple separator rows - e.g. for headings
			// 2) A column grouping row
			// 3) A column width row
			"patterns": [
				{
					"line": "^\\s*(?P<table>\\|-[-+]*\\|)\\s*$", // Separator rows start with "|-"
					"cell": [
						"^(?P<cell>\\|(?P<markup>-+))(?=\\+|\\|)",
						"(?P<cell>\\+(?P<markup>-+))(?=\\+|\\|)" // Inner cells are bordered with '+', not '|'
					]
				},
				{
					"line": "^\\s*(?P<table>\\|\\s*/\\s*\\|(?:\\s*<?\\s*>?\\s*\\|)*)\\s*$",
					"cell": [
						"^(?P<cell>\\|(?P<markup>\\s*/\\s*))(?=\\|)", // First cell contains "/"
						"(?P<cell>\\|(?P<markup>\\s*<?>?\\s*))(?=\\|)" // All other cells are empty, or contain "<" and/or ">""
					]
				},
				{
					"line": "^\\s*(?P<table>\\|(?:\\s*\\|)*(?:\\s*<\\d+>\\s*\\|)(?:\\s*(?:<\\d+>)?\\s*\\|)*)\\s*$", // At least one cell must have a "<1>" form width, and all other must be empty.
					"cell": "(?P<cell>\\|(?P<markup>\\s*(?:<\\d+>)?\\s*))(?=\\|)"
				},
				{
					"line": "^\\s*(?P<table>\\|.*\\|)\\s*$",
					"cell": "(?P<cell>\\|(?P<markup>(?P<content>\\s*?(?P<trimmed>\\B|(?:\\S.*?))\\s*)))(?=\\|)"
				}
			]
		},
		"textile": 
		{
			// There are two relevant selectors. Simple tables only have the `.cell.` scope.
			// Non-cell markup lines _don't_ have the `.cell.` scope, but we want to capture them
			// as part of the table.
			"selector": "markup.other.table.textile | markup.other.table.cell.textile",
			"except_selector": "text.html.textile",
			// The main context `selector` is restrictive to specifically tables.
			// To determine if a given file is a Textile file at all, we check the
			// first position of the file against the file_selector (if specified)
			// or the main selector (if not), so we need the broadest-possible selector
			// that limits it to Textile.
			"file_selector": "text.html.textile",
			// Textile supports a wide variety of markup.
			"patterns": [
				{
					// Markup lines that don't contain "cells" are recognized, but otherwise ignored
					// They are identified as lines that start with a pipe, but do not end with a pipe.
					"line": "^\\|.*(?<!\\|)\\s*$",
				},
				{
					// Column grouping lines begin with a `:` immediately after the first pipe.
					// They can optionally contain "cells" of markup, which will be captured.
					"line": "^(?P<table>\\|:.*\\|)\\s*$",
					"cell": [
						"^(?P<cell>\\|(?P<markup>:.*?))(?=\\|)",
						"(?P<cell>\\|(?P<markup>.*?))(?=\\|)"
					]
				},
				{
					// Row markup can be inserted before the first pipe, followed by a period and a space. That will be ignored.
					// Types of row attributes:
					//  * class name. e.g. `(classname)`
					//  * inline style. e.g. `{color:red}`
					//  * language code. e.g. `[fr]`
					"line": "^(?:(?:(?:\\(.*?\\))|(?:\\{.*?\\})|(?:\\[.*?\\]))+\\. )?(?P<table>\\|.*\\|)\\s*$",
					// Similarly, cell markup can be inserted at the start of each cell. That will be captured as markup.
					// In addition to the same three attributes that can be used for row markup, these are possible cell markup elements:
					//  * row/column spans - a slash (\ for colspans, / for rowspans) followed digits
					//  * heading - an underscore
					//  * cell alignment - these characters: =>^-~ (center, right, top, middle, bottom)
					"cell": "(?P<cell>\\|(?P<markup>(?:(?:[_=>^-~]|(?:[\\\\/]\\d+)|(?:\\(.*?\\))|(?:\\{.*?\\})|(?:\\[.*?\\]))+\\.)?(?P<content>\\s*?(?P<trimmed>\\B|(?:\\S.*?))\\s*)))(?=\\|)"
				}
			],
		},
		"auto_csv":
		{
			// This context is handled as a special case in the code. It doesn't automatically
			// map to a syntax (because there is no common CSV syntax), and it allows the column
			// delimiter to be formatted into the pattern regexes at runtime.
			// TabNav attempts to automatically determine the delimiter to use:
			// 1) If the current file syntax is from either of the Advanced CSV or Rainbow CSV packages,
			//    the delimiter set by those packages is used.
			//      - Note: Rainbow CSV "simple" syntaxes aren't truly supported. Cells that _start_
			//        with a double-quote (optionally preceded by spaces) will be treated as quoted cells.
			// 2) If the Set CSV Delimiter command has been run on the current view, the delimiter
			//    defined by that command is used.
			// 3) If the first line of the file contains only one of the "auto_delimiters", then it is
			//    assumed to be the delimiter:
			//    * Comma (,)
			//    * Semi-colon (;)
			//    * Pipe (|)
			//    * Tab
			// 4) If all else fails, use the "default_delimiter".
			"auto_delimiters": [",", ";", "\\|", "\\t"],
			"default_delimiter": ",",
			// Because CSV cells can be optionally quoted, and double-quotes themselves can also
			// be contained in the cell (escaped by double-double-quote), the matching gets a bit
			// tricky. If the cell starts with a quote (after optional whitespace), then it needs
			// to end with either a single quote, or three quotes, followed by optional whitespace.
			// _Each_ of these patterns match one of three scenarios within the <content> group:
			// 1) Empty or whitespace-only cell
			// 2) Unquoted content
			// 3) Quoted content
			"patterns": {
				"cell": [
					"^(?P<cell>(?P<markup>(?P<content> *?(?P<trimmed>\\B|(?:[^\" ].*?)|(?:\"(?:\"{{2}}|[^\"])*?\")) *)))(?={0})", // First cell of the line - no preceding delimiter
					"(?P<cell>{0}(?P<markup>(?P<content> *?(?P<trimmed>\\B|(?:[^\" ].*?)|(?:\"(?:\"{{2}}|[^\"])*?\")) *)))(?={0})", // Middle cells - delimiters on both ends
					"(?P<cell>{0}(?P<markup>(?P<content> *?(?P<trimmed>\\B(?=$)|(?:[^\"].*?)|(?:\"(?:\"{{2}}|[^\"])*?\")) *)))$" // Last cell of the line - no final delimiter look-ahead
				]
			},
			"enable_explicitly": true, // We'll only infer the auto_csv context if tabnav has been explicitly enabled on a particular view
			"selector": null, // There is no global selector that matches all CSV syntaxes. This is a special case.
		}
	},

	// Once command mappings have been migrated to v3.5 commands, set this to false to disable
	// the legacy commands.
	"use_legacy_commands": true,
	
	"log_level": "WARNING"
}