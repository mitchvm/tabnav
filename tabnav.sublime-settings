{
	"include_separators": false,
	"contexts":
	{
		"markdown": 
		{
			"selector": "text.html.markdown",
			"except_selector": "markup.raw",
			"cell_pattern": "\\|?(?P<content>.*?)(?=\\|)",
			"eol_pattern": "\\|(?P<content>.+)$",
			"sep_cell_pattern": "\\|?(?P<content>\\s*[:-]+\\s*)(?=\\|)",
			"sep_eol_pattern": "\\|(?P<content>\\s*[:-]+\\s*)",
		},
		"auto_csv":
		{
			// This context is handled as a special case in the code. It doesn't automatically
			// map to a syntax (because there is no common CSV syntax), and it allows the column
			// delimiter to be formatted into the pattern regexes at runtime.
			// TabNav attempts to automatically determine the delimiter to use:
			// 1) If the current file syntax is from either of the Advanced CSV or Rainbow CSV packages,
			//    the delimiter set by those packages is used.
			//      - Note: Rainbow CSV "simple" syntaxes aren't truly supported. Cells that _start_
			//        with a double-quote (optionally preceded by spaces) will be treated as quoted cells.
			// 2) If the Set CSV Delimiter command has been run on the current view, the delimiter
			//    defined by that command is used.
			// 3) If the first line of the file contains only one of the "auto_delimiters", then it is
			//    assumed to be the delimiter:
			//    * Comma (,)
			//    * Semi-colon (;)
			//    * Pipe (|)
			//    * Tab
			// 4) If all else fails, use the "default_delimiter".
			"auto_delimiters": [",", ";", "\\|", "\\t"],
			"default_delimiter": ",",
			"selector": "text.advanced_csv", // Rainbow CSV has a huge number of potential scopes; those are matched in code.
			// Because CSV cells can be optionally quoted, and double-quotes themselves can also
			// be contained in the cell (escaped by double-double-quote), the matching gets a bit
			// tricky. If the cell starts with a quote (after optional whitespace), then it needs
			// to end with either a single quote, or three quotes, followed by optional whitespace.
			// These patterns match one of three scenarios within the <content> group:
			// 1) Empty or whitespace-only cell
			// 2) Unquoted content
			// 3) Quoted content
			"cell_pattern": "(?:{0})?(?P<content>(?:\\s*)|(?:\\s*[^\"\\s].*?)|(?:\\s*\"(?:\"{{2}}|[^\"])*?\"\\s*))(?={0})",
			"eol_pattern": "{0}(?P<content>(?:\\s*)|(?:\\s*[^\"].*?)|(?:\\s*\"(?:\"{{2}}|[^\"])*?\"\\s*))$",
			"enable_explicitly": true, // We'll only infer the auto_csv context if tabnav has been explicitly enabled on a particular view
		}
	}
}